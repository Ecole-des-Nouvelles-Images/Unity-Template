name: Unity CI/CD Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  UNITY_VERSION: "6000.0.49.f1"
  FILE_PATTERNS: "*.unity *.prefab *.mat *.asset *.anim *.controller"
  DISCORD_MESSAGE: "Nouveau build Unity publi√© pour la version ${{ github.ref_name }} !"
  RELEASE_BODY: "Nouveau build Unity pour la version ${{ github.ref_name }}."
  RELEASE_NAME: "Unity Build"

jobs:
  setup:
    name: Setup Build Config
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
      - id: set_matrix
        run: |
          MATRIX_JSON=$(cat <<EOF
          {
            "include": [
              { "targetPlatform": "StandaloneWindows64", "enabled": true, "archive": "UnityBuild_Windows.zip" },
              { "targetPlatform": "StandaloneOSX", "enabled": false, "archive": "UnityBuild_Mac.zip" },
              { "targetPlatform": "Android", "enabled": false, "archive": "UnityBuild_Android.zip" }
            ]
          }
          EOF
          )
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  check_conflicts:
    name: Check for Unity file conflicts
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v3
      - name: Detect merge conflict markers
        run: |
          echo "Checking for conflict markers in Unity files..."
          grep -r -E '<<<<<<<|=======|>>>>>>>' --include=${{ env.FILE_PATTERNS }} ./ || true
          CONFLICT_COUNT=$(grep -r -E '<<<<<<<|=======|>>>>>>>' --include=${{ env.FILE_PATTERNS }} ./ | wc -l)
          echo "Found $CONFLICT_COUNT conflict markers."
          if [ "$CONFLICT_COUNT" -gt 0 ]; then
            echo "::error file=CONFLICT,::Conflict markers found in Unity files! Please resolve before merging."
            exit 1
          fi

  build:
    name: Build for ${{ matrix.targetPlatform }}
    needs: [setup, check_conflicts]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    if: matrix.enabled == true
    steps:
      - uses: actions/checkout@v3
      - name: Activate Unity License
        uses: game-ci/unity-activate@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      - name: Build ${{ matrix.targetPlatform }}
        uses: game-ci/unity-builder@v2
        with:
          unityVersion: ${{ env.UNITY_VERSION }}
          targetPlatform: ${{ matrix.targetPlatform }}
      - run: |
          mkdir -p release
          zip -r release/${{ matrix.archive }} build/${{ matrix.targetPlatform }}

  release_build:
    name: Create or Update GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create or Update GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ env.RELEASE_NAME }} ${{ github.ref_name }}
          body: ${{ env.RELEASE_BODY }}
          draft: false
          prerelease: false
          files: |
            release/UnityBuild_Windows.zip
            release/UnityBuild_Mac.zip
            release/UnityBuild_Android.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify_team:
    name: Notify Team
    needs: release_build
    runs-on: ubuntu-latest
    steps:
      - name: Notify on Discord
        uses: Ilshidur/action-discord@master
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          message: ${{ env.DISCORD_MESSAGE }}
      - name: Notify on Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author
          author_name: GitHub Actions
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
